{
	"id": "2f6cd2ac-ff89-4b89-b512-95136c6a07b8",
	"name": "API Collections",
	"timestamp": "2022-11-23T23:32:54.867Z",
	"collection_id": "19407265-348c4457-1775-4a56-8ea2-02b3fd4ea2b7",
	"folder_id": 0,
	"environment_id": "19407265-b00bc5ea-04e4-4d2b-beb4-7ab638e06d43",
	"totalPass": 148,
	"totalFail": 0,
	"results": [
		{
			"id": "6f817739-f4f0-4616-9f97-b1e34b9948f2",
			"name": "Get All Todo Entries",
			"time": 78,
			"responseCode": {
				"code": 404,
				"name": "Not Found"
			},
			"tests": {
				"response should have a body": true,
				"response body must be a Json body": true
			},
			"testPassFailCounts": {
				"response should have a body": {
					"pass": 2,
					"fail": 0
				},
				"response body must be a Json body": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				158,
				78
			],
			"allTests": [
				{
					"response should have a body": true,
					"response body must be a Json body": true
				},
				{
					"response should have a body": true,
					"response body must be a Json body": true
				}
			]
		},
		{
			"id": "5c811d17-3dd2-4644-86c5-730f58f93e7d",
			"name": "Get All Entries",
			"time": 132,
			"responseCode": {
				"code": 200,
				"name": "OK"
			},
			"tests": {
				"response should have Status string to be OK": true,
				"response should have a body": true,
				"response body must be a Json body": true,
				"Check the active environment is Team-Postman": true,
				"The Respons body should contain objects apiVersion, title, scopes": true,
				"Respons Body should contain string: apiVersion with value 6.3.8.0": true,
				"Respons Body should contain string: scopes with value [default]": true
			},
			"testPassFailCounts": {
				"response should have Status string to be OK": {
					"pass": 2,
					"fail": 0
				},
				"response should have a body": {
					"pass": 2,
					"fail": 0
				},
				"response body must be a Json body": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				},
				"The Respons body should contain objects apiVersion, title, scopes": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string: apiVersion with value 6.3.8.0": {
					"pass": 1,
					"fail": 0
				},
				"Respons Body should contain string: scopes with value [default]": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				127,
				132
			],
			"allTests": [
				{
					"response should have Status string to be OK": true,
					"response should have a body": true,
					"response body must be a Json body": true,
					"Check the active environment is Team-Postman": true,
					"The Respons body should contain objects apiVersion, title, scopes": true,
					"Respons Body should contain string: apiVersion with value 6.3.8.0": true,
					"Respons Body should contain string: scopes with value [default]": true
				},
				{
					"response should have Status string to be OK": true,
					"response should have a body": true,
					"response body must be a Json body": true,
					"Check the active environment is Team-Postman": true,
					"The Respons body should contain objects apiVersion, title, scopes": true,
					"Respons Body should contain string: apiVersion with value 6.3.8.0": true,
					"Respons Body should contain string: scopes with value [default]": true
				}
			]
		},
		{
			"id": "9cbfdf35-ad4b-4332-912c-767312398c53",
			"name": "Get entry per ID",
			"time": 76,
			"responseCode": {
				"code": 404,
				"name": "Not Found"
			},
			"tests": {
				"response must have a body": true,
				"response body must be a Json body": true,
				"Response body should contain string success": true
			},
			"testPassFailCounts": {
				"response must have a body": {
					"pass": 2,
					"fail": 0
				},
				"response body must be a Json body": {
					"pass": 2,
					"fail": 0
				},
				"Response body should contain string success": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				76,
				76
			],
			"allTests": [
				{
					"response must have a body": true,
					"response body must be a Json body": true,
					"Response body should contain string success": true
				},
				{
					"response must have a body": true,
					"response body must be a Json body": true,
					"Response body should contain string success": true
				}
			]
		},
		{
			"id": "00f8d3b0-68c1-4f07-8a1e-f262facc4593",
			"name": "Get All Books",
			"time": 156,
			"responseCode": {
				"code": 200,
				"name": "OK"
			},
			"tests": {
				"Status code  should be 200": true,
				"The Search should be for a book name called Viscount Who Loved Me": true,
				"The Search should be if the book is available": true,
				"The Search should be for a book  with id 3": true,
				"The Search should be for a book of type fiction": true,
				"The Search should be for a book of type non-fiction": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code  should be 200": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book name called Viscount Who Loved Me": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be if the book is available": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book  with id 3": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book of type fiction": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book of type non-fiction": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				139,
				156
			],
			"allTests": [
				{
					"Status code  should be 200": true,
					"The Search should be for a book name called Viscount Who Loved Me": true,
					"The Search should be if the book is available": true,
					"The Search should be for a book  with id 3": true,
					"The Search should be for a book of type fiction": true,
					"The Search should be for a book of type non-fiction": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code  should be 200": true,
					"The Search should be for a book name called Viscount Who Loved Me": true,
					"The Search should be if the book is available": true,
					"The Search should be for a book  with id 3": true,
					"The Search should be for a book of type fiction": true,
					"The Search should be for a book of type non-fiction": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "70c56f0e-5216-4a83-8be2-e4827ebd1276",
			"name": "Get By Type Fiction",
			"time": 182,
			"responseCode": {
				"code": 200,
				"name": "OK"
			},
			"tests": {
				"Status code  should be 200": true,
				"The Search should be for a book name called Viscount Who Loved Me": true,
				"The Search should be if the book is available": true,
				"The Search should be for a book  with id 3": true,
				"The Search should be for a book of type fiction": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code  should be 200": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book name called Viscount Who Loved Me": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be if the book is available": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book  with id 3": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book of type fiction": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				236,
				182
			],
			"allTests": [
				{
					"Status code  should be 200": true,
					"The Search should be for a book name called Viscount Who Loved Me": true,
					"The Search should be if the book is available": true,
					"The Search should be for a book  with id 3": true,
					"The Search should be for a book of type fiction": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code  should be 200": true,
					"The Search should be for a book name called Viscount Who Loved Me": true,
					"The Search should be if the book is available": true,
					"The Search should be for a book  with id 3": true,
					"The Search should be for a book of type fiction": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "a25cb6c5-77eb-4ea1-8c5d-e864f5fecd71",
			"name": "Get By Type non-Fiction",
			"time": 145,
			"responseCode": {
				"code": 200,
				"name": "OK"
			},
			"tests": {
				"Status code  should be 200": true,
				"The Search should be for a nonFictionBook name called Just as I Am": true,
				"The Search should be if the nonFictionBook is available": true,
				"The Search should be for a book  with id 3": true,
				"The Search should be for a nonFictionBook of type fiction": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code  should be 200": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a nonFictionBook name called Just as I Am": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be if the nonFictionBook is available": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a book  with id 3": {
					"pass": 2,
					"fail": 0
				},
				"The Search should be for a nonFictionBook of type fiction": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				142,
				145
			],
			"allTests": [
				{
					"Status code  should be 200": true,
					"The Search should be for a nonFictionBook name called Just as I Am": true,
					"The Search should be if the nonFictionBook is available": true,
					"The Search should be for a book  with id 3": true,
					"The Search should be for a nonFictionBook of type fiction": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code  should be 200": true,
					"The Search should be for a nonFictionBook name called Just as I Am": true,
					"The Search should be if the nonFictionBook is available": true,
					"The Search should be for a book  with id 3": true,
					"The Search should be for a nonFictionBook of type fiction": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "aac41c20-b3d5-4c2a-94c6-dae8e6909acd",
			"name": "with valid parameters",
			"time": 304,
			"responseCode": {
				"code": 201,
				"name": "Created"
			},
			"tests": {
				"Status code should be 201": true,
				"Status Message should have the String: Created": true,
				"Confirm the order contains all expected keys": true,
				"Respons Body should contain string:created and set to true": true,
				"response body must be a Json body": true
			},
			"testPassFailCounts": {
				"Status code should be 201": {
					"pass": 2,
					"fail": 0
				},
				"Status Message should have the String: Created": {
					"pass": 2,
					"fail": 0
				},
				"Confirm the order contains all expected keys": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string:created and set to true": {
					"pass": 2,
					"fail": 0
				},
				"response body must be a Json body": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				331,
				304
			],
			"allTests": [
				{
					"Status code should be 201": true,
					"Status Message should have the String: Created": true,
					"Confirm the order contains all expected keys": true,
					"Respons Body should contain string:created and set to true": true,
					"response body must be a Json body": true
				},
				{
					"Status code should be 201": true,
					"Status Message should have the String: Created": true,
					"Confirm the order contains all expected keys": true,
					"Respons Body should contain string:created and set to true": true,
					"response body must be a Json body": true
				}
			]
		},
		{
			"id": "bab6e759-abd8-4ec4-b648-6273ef62c0da",
			"name": "valid  book_id and no Client_ name",
			"time": 399,
			"responseCode": {
				"code": 201,
				"name": "Created"
			},
			"tests": {
				"Status code should be 201": true,
				"Status Message should have the String: Created": true,
				"Confirm the order contains all expected keys": true,
				"Respons Body should contain string:created and set to true": true,
				"response body must be a Json body": true
			},
			"testPassFailCounts": {
				"Status code should be 201": {
					"pass": 2,
					"fail": 0
				},
				"Status Message should have the String: Created": {
					"pass": 2,
					"fail": 0
				},
				"Confirm the order contains all expected keys": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string:created and set to true": {
					"pass": 2,
					"fail": 0
				},
				"response body must be a Json body": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				424,
				399
			],
			"allTests": [
				{
					"Status code should be 201": true,
					"Status Message should have the String: Created": true,
					"Confirm the order contains all expected keys": true,
					"Respons Body should contain string:created and set to true": true,
					"response body must be a Json body": true
				},
				{
					"Status code should be 201": true,
					"Status Message should have the String: Created": true,
					"Confirm the order contains all expected keys": true,
					"Respons Body should contain string:created and set to true": true,
					"response body must be a Json body": true
				}
			]
		},
		{
			"id": "5982f664-5cb6-463c-8b06-da65a69e9037",
			"name": "with an invalid  book_id",
			"time": 259,
			"responseCode": {
				"code": 400,
				"name": "Bad Request"
			},
			"tests": {
				"Status code should be 400": true,
				"Status Message should have the String: Bad Request": true,
				"Response body should have string: error": true,
				"response body must be a Json body": true
			},
			"testPassFailCounts": {
				"Status code should be 400": {
					"pass": 2,
					"fail": 0
				},
				"Status Message should have the String: Bad Request": {
					"pass": 2,
					"fail": 0
				},
				"Response body should have string: error": {
					"pass": 2,
					"fail": 0
				},
				"response body must be a Json body": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				150,
				259
			],
			"allTests": [
				{
					"Status code should be 400": true,
					"Status Message should have the String: Bad Request": true,
					"Response body should have string: error": true,
					"response body must be a Json body": true
				},
				{
					"Status code should be 400": true,
					"Status Message should have the String: Bad Request": true,
					"Response body should have string: error": true,
					"response body must be a Json body": true
				}
			]
		},
		{
			"id": "122f2ab1-b181-4874-aa72-6cd5db593d83",
			"name": "with valid accessToken",
			"time": 149,
			"responseCode": {
				"code": 200,
				"name": "OK"
			},
			"tests": {
				"Status code string has OK string": true,
				"Status code should be 200": true,
				"Respons Body should contain string": true,
				"Confirm the response contains all expected keys": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code string has OK string": {
					"pass": 2,
					"fail": 0
				},
				"Status code should be 200": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string": {
					"pass": 2,
					"fail": 0
				},
				"Confirm the response contains all expected keys": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				140,
				149
			],
			"allTests": [
				{
					"Status code string has OK string": true,
					"Status code should be 200": true,
					"Respons Body should contain string": true,
					"Confirm the response contains all expected keys": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code string has OK string": true,
					"Status code should be 200": true,
					"Respons Body should contain string": true,
					"Confirm the response contains all expected keys": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "40289ebb-7be3-4ddb-9f8e-a3c1a4458439",
			"name": "with invalid accessToken",
			"time": 153,
			"responseCode": {
				"code": 401,
				"name": "Unauthorized"
			},
			"tests": {
				"Status code string has string: Unauthorized ": true,
				"Status code should be 401": true,
				"Respons Body should contain string": true,
				"The response should contain an error message": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code string has string: Unauthorized ": {
					"pass": 2,
					"fail": 0
				},
				"Status code should be 401": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string": {
					"pass": 2,
					"fail": 0
				},
				"The response should contain an error message": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				142,
				153
			],
			"allTests": [
				{
					"Status code string has string: Unauthorized ": true,
					"Status code should be 401": true,
					"Respons Body should contain string": true,
					"The response should contain an error message": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code string has string: Unauthorized ": true,
					"Status code should be 401": true,
					"Respons Body should contain string": true,
					"The response should contain an error message": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "5d3450fd-edb1-4e91-b298-377a7994478d",
			"name": "with missing accessToken",
			"time": 168,
			"responseCode": {
				"code": 401,
				"name": "Unauthorized"
			},
			"tests": {
				"Status code string has string: Unauthorized ": true,
				"Status code should be 401": true,
				"Respons Body should contain string": true,
				"The response should contain an error message": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code string has string: Unauthorized ": {
					"pass": 2,
					"fail": 0
				},
				"Status code should be 401": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string": {
					"pass": 2,
					"fail": 0
				},
				"The response should contain an error message": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				148,
				168
			],
			"allTests": [
				{
					"Status code string has string: Unauthorized ": true,
					"Status code should be 401": true,
					"Respons Body should contain string": true,
					"The response should contain an error message": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code string has string: Unauthorized ": true,
					"Status code should be 401": true,
					"Respons Body should contain string": true,
					"The response should contain an error message": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "c860c799-7d37-48fe-a6ae-7f0aac4f4995",
			"name": "with valid order ID",
			"time": 360,
			"responseCode": {
				"code": 200,
				"name": "OK"
			},
			"tests": {
				"Status code name has OK string": true,
				"Status code should be 200": true,
				"Respons Body should contain string": true,
				"Object is contained": true,
				"Response property for orderId matches environment variable orderId": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code name has OK string": {
					"pass": 2,
					"fail": 0
				},
				"Status code should be 200": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string": {
					"pass": 2,
					"fail": 0
				},
				"Object is contained": {
					"pass": 2,
					"fail": 0
				},
				"Response property for orderId matches environment variable orderId": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				143,
				360
			],
			"allTests": [
				{
					"Status code name has OK string": true,
					"Status code should be 200": true,
					"Respons Body should contain string": true,
					"Object is contained": true,
					"Response property for orderId matches environment variable orderId": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code name has OK string": true,
					"Status code should be 200": true,
					"Respons Body should contain string": true,
					"Object is contained": true,
					"Response property for orderId matches environment variable orderId": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "0a97e840-d277-4414-a898-cf92ab69bcc1",
			"name": "with invalid order ID",
			"time": 542,
			"responseCode": {
				"code": 200,
				"name": "OK"
			},
			"tests": {
				"Status code name has OK string": true,
				"Status code should be 200": true,
				"Respons Body should contain string": true,
				"Object is contained": true,
				"Response property for orderId matches environment variable orderId": true,
				"Check the active environment is Team-Postman": true
			},
			"testPassFailCounts": {
				"Status code name has OK string": {
					"pass": 2,
					"fail": 0
				},
				"Status code should be 200": {
					"pass": 2,
					"fail": 0
				},
				"Respons Body should contain string": {
					"pass": 2,
					"fail": 0
				},
				"Object is contained": {
					"pass": 2,
					"fail": 0
				},
				"Response property for orderId matches environment variable orderId": {
					"pass": 2,
					"fail": 0
				},
				"Check the active environment is Team-Postman": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				598,
				542
			],
			"allTests": [
				{
					"Status code name has OK string": true,
					"Status code should be 200": true,
					"Respons Body should contain string": true,
					"Object is contained": true,
					"Response property for orderId matches environment variable orderId": true,
					"Check the active environment is Team-Postman": true
				},
				{
					"Status code name has OK string": true,
					"Status code should be 200": true,
					"Respons Body should contain string": true,
					"Object is contained": true,
					"Response property for orderId matches environment variable orderId": true,
					"Check the active environment is Team-Postman": true
				}
			]
		},
		{
			"id": "0cbd970f-ecb7-4122-a6d9-75fe76e32d35",
			"name": "Delete an order",
			"time": 423,
			"responseCode": {
				"code": 204,
				"name": "No Content"
			},
			"tests": {
				"Status code should be 204": true,
				"Status code name has string OK": true
			},
			"testPassFailCounts": {
				"Status code should be 204": {
					"pass": 2,
					"fail": 0
				},
				"Status code name has string OK": {
					"pass": 2,
					"fail": 0
				}
			},
			"times": [
				598,
				423
			],
			"allTests": [
				{
					"Status code should be 204": true,
					"Status code name has string OK": true
				},
				{
					"Status code should be 204": true,
					"Status code name has string OK": true
				}
			]
		}
	],
	"count": 2,
	"totalTime": 7078,
	"collection": {
		"requests": [
			{
				"id": "6f817739-f4f0-4616-9f97-b1e34b9948f2",
				"method": "GET"
			},
			{
				"id": "5c811d17-3dd2-4644-86c5-730f58f93e7d",
				"method": "GET"
			},
			{
				"id": "9cbfdf35-ad4b-4332-912c-767312398c53",
				"method": "GET"
			},
			{
				"id": "00f8d3b0-68c1-4f07-8a1e-f262facc4593",
				"method": "GET"
			},
			{
				"id": "70c56f0e-5216-4a83-8be2-e4827ebd1276",
				"method": "GET"
			},
			{
				"id": "a25cb6c5-77eb-4ea1-8c5d-e864f5fecd71",
				"method": "GET"
			},
			{
				"id": "aac41c20-b3d5-4c2a-94c6-dae8e6909acd",
				"method": "POST"
			},
			{
				"id": "bab6e759-abd8-4ec4-b648-6273ef62c0da",
				"method": "POST"
			},
			{
				"id": "5982f664-5cb6-463c-8b06-da65a69e9037",
				"method": "POST"
			},
			{
				"id": "122f2ab1-b181-4874-aa72-6cd5db593d83",
				"method": "GET"
			},
			{
				"id": "40289ebb-7be3-4ddb-9f8e-a3c1a4458439",
				"method": "GET"
			},
			{
				"id": "5d3450fd-edb1-4e91-b298-377a7994478d",
				"method": "GET"
			},
			{
				"id": "c860c799-7d37-48fe-a6ae-7f0aac4f4995",
				"method": "GET"
			},
			{
				"id": "0a97e840-d277-4414-a898-cf92ab69bcc1",
				"method": "GET"
			},
			{
				"id": "0cbd970f-ecb7-4122-a6d9-75fe76e32d35",
				"method": "DELETE"
			}
		]
	}
}