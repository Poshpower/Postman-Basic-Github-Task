{
	"info": {
		"_postman_id": "348c4457-1775-4a56-8ea2-02b3fd4ea2b7",
		"name": "API Collections",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19407265"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has OK string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/todo",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"console.log(responseJson.apiVersion)",
									"",
									"pm.test(\"response should have Status string to be OK\", function () {",
									"     pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"response should have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"response body must be a Json body\", function () {",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check the active environment is TEAM POSTMAN\", () => {",
									"  pm.expect(pm.environment.name).to.eql(\"TEAM POSTMAN\");",
									"});",
									"",
									"pm.test(\"The Respons body should contain objects apiVersion, title, scopes\", () => {",
									"  const expectedObject = {",
									" \"apiVersion\": \"6.3.8.0\",",
									"    \"title\": \"Fusio\",",
									"    \"scopes\": [",
									"        \"default\"",
									"    ],",
									"};",
									"  pm.expect(pm.response.json()).to.deep.include(expectedObject);",
									"});",
									"",
									" var jsonData = pm.response.json();",
									" console.log(jsonData.apiVersion)",
									" console.log(jsonData.scopes)",
									"",
									"pm.test(\"Respons Body should contain string apiVersion with value 6.3.8.0\", function () {  ",
									"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");",
									"});",
									"",
									"pm.test(\"Respons Body should contain string scopes with value [default]\", function () {  ",
									"    pm.expect(jsonData.scopes).to.eql([\"default\"]);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Entry per ID",
			"item": [
				{
					"name": "Get entry per ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string  should contain success\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"});",
									"",
									" var jsonData = pm.response.json();",
									"pm.test(\"The request should return success with value true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Status code should be  200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must have a body\", function () {",
									"     pm.response.to.be.withBody;  ",
									"});",
									"",
									"pm.test(\"response body must be a Json body\", function () {",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/todo/?todo_id=2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "2"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code  should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[1].name);\r",
									"pm.test(\"The Search should be for a book name called The Vanishing Half\", function (){\r",
									"    pm.expect(response[1].name).to.eql(\"The Vanishing Half\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"pm.test(\"environment to be TEAM POSTMAN\", function () {\r",
									"    pm.expect(pm.environment.get(environment)).to.equal(\"TEAM POSTMAN\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlsimplebooks}}/books?type=fiction",
							"host": [
								"{{baseurlsimplebooks}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a Book Order",
			"item": [
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const OrderId = pm.response.json();\r",
									"\r",
									"// console.log(OrderId.orderId);\r",
									"// pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									"\r",
									"  const responseJson = pm.response.json();\r",
									"pm.test(\"An order should be created with respon set to true\", () => {\r",
									"  pm.expect(responseJson.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code should be is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"An OrderId should be generated\", function () {\r",
									"     pm.expect(responseJson.orderId).to.eql(responseJson.orderId);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have string: reated\", () => {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"Gbenga\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlsimplebooks}}/orders",
							"host": [
								"{{baseurlsimplebooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlsimplebooks}}/orders",
							"host": [
								"{{baseurlsimplebooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get An Order",
			"item": [
				{
					"name": "Get an order",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Gbenga\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlsimplebooks}}/orders/:orderId",
							"host": [
								"{{baseurlsimplebooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete An Order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlsimplebooks}}/orders/:orderId",
							"host": [
								"{{baseurlsimplebooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderIdToDelete}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}